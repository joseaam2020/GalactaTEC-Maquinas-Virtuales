import pygame
import random
import math
import time

pygame.init()

# Configuración básica
ANCHO, ALTO = 800, 600
pantalla = pygame.display.set_mode((ANCHO, ALTO))
pygame.display.set_caption("Juego con Bonus, Disparos y Niveles")

# Colores
NEGRO = (0, 0, 0)
BLANCO = (255, 255, 255)
ROJO = (255, 0, 0)
VERDE = (0, 255, 0)
AZUL = (0, 128, 255)
AMARILLO = (255, 255, 0)
MORADO = (180, 0, 255)
CYAN = (0, 255, 255)

# -----------------------------------------------------
# CLASES
# -----------------------------------------------------

class Jugador:
    def __init__(self):
        self.x = ANCHO // 2
        self.y = ALTO - 60
        self.vel = 5
        self.vida = 3
        self.puntos = 0
        self.escudo = 0
        self.tamaño = 40
        self.doble_puntos = False
        self.doble_puntos_fin = 0
        self.tipo_disparo = "normal"
        self.invulnerable_hasta = 0
        self.bonus_teclas = {1: False, 2: False, 3: False, 4: 0, 5: 0}

    def mover(self, teclas):
        if teclas[pygame.K_LEFT] or teclas[pygame.K_a]:
            self.x -= self.vel
        if teclas[pygame.K_RIGHT] or teclas[pygame.K_d]:
            self.x += self.vel
        if teclas[pygame.K_UP] or teclas[pygame.K_w]:
            self.y -= self.vel
        if teclas[pygame.K_DOWN] or teclas[pygame.K_s]:
            self.y += self.vel
        self.x = max(0, min(ANCHO - self.tamaño, self.x))
        self.y = max(0, min(ALTO - self.tamaño, self.y))

    def dibujar(self, superficie):
        color = AZUL if self.escudo == 0 else AMARILLO
        pygame.draw.rect(superficie, color, (self.x, self.y, self.tamaño, self.tamaño))
        if self.escudo > 0:
            pygame.draw.circle(superficie, CYAN, (self.x + 20, self.y + 20), 30, 2)

    def disparar(self, disparos):
        # Crea un disparo del tipo actual
        disparos.append(Disparo(self.x + 20, self.y, self.tipo_disparo, enemigos))

        # Si es disparo AOE o rastreador, consume una bala
        if self.tipo_disparo == "area":
            self.bonus_teclas[4] -= 1
            if self.bonus_teclas[4] <= 0:
                self.tipo_disparo = "normal"
        elif self.tipo_disparo == "rastreador":
            self.bonus_teclas[5] -= 1
            if self.bonus_teclas[5] <= 0:
                self.tipo_disparo = "normal"

    def recibir_daño(self):
        if time.time() < self.invulnerable_hasta:
            return
        if self.escudo > 0:
            self.escudo -= 1
        else:
            self.vida -= 1
        self.invulnerable_hasta = time.time() + 1

    def aplicar_bonus(self, tipo):
        if tipo == "vida":
            if self.vida < 3:
                self.vida += 1
        elif tipo == "doble_puntos":
            self.doble_puntos = True
            self.doble_puntos_fin = time.time() + 15
        elif tipo == "escudo":
            self.escudo = 3

    def actualizar_bonus(self):
        if self.doble_puntos and time.time() > self.doble_puntos_fin:
            self.doble_puntos = False

    def asignar_bonus_tecla(self, tipo):
        # Asignar el bonus al slot correspondiente
        if tipo == "vida":
            self.bonus_teclas[1] = True
        elif tipo == "escudo":
            self.bonus_teclas[2] = True
        elif tipo == "doble_puntos":
            self.bonus_teclas[3] = True
        elif tipo == "area":
            self.bonus_teclas[4] = 1  # 1 disparo AOE
        elif tipo == "rastreador":
            self.bonus_teclas[5] = 3  # 3 disparos rastreadores

    def usar_bonus(self, tecla):
        # Activa los bonus al presionar tecla (1–5)
        if tecla == 1 and self.bonus_teclas[1]:
            self.aplicar_bonus("vida")
            self.bonus_teclas[1] = False
        elif tecla == 2 and self.bonus_teclas[2]:
            self.aplicar_bonus("escudo")
            self.bonus_teclas[2] = False
        elif tecla == 3 and self.bonus_teclas[3]:
            self.aplicar_bonus("doble_puntos")
            self.bonus_teclas[3] = False
        elif tecla == 4 and self.bonus_teclas[4] > 0:
            self.tipo_disparo = "area"
        elif tecla == 5 and self.bonus_teclas[5] > 0:
            self.tipo_disparo = "rastreador"


class Disparo:
    def __init__(self, x, y, tipo="normal", enemigos=None):
        self.x = x
        self.y = y
        self.tipo = tipo
        self.vel = 7
        self.radio = 5
        self.impactado = False
        self.explosion_frames = 0
        self.rastreador_halo = 0

        # Nuevo: definir si puede rastrear o no
        self.objetivo = None
        if tipo == "rastreador" and enemigos:
            # solo selecciona objetivo si el disparo nace por debajo del enemigo
            enemigos_validos = [e for e in enemigos if self.y > e.y + e.tamaño]
            if enemigos_validos:
                # elegir el más cercano en X (por ejemplo)
                self.objetivo = min(enemigos_validos, key=lambda e: abs(e.x - self.x))

    def mover(self, _=None):
        if self.tipo == "rastreador" and self.objetivo and not self.impactado:
            dx = self.objetivo.x + self.objetivo.tamaño / 2 - self.x
            dy = self.objetivo.y + self.objetivo.tamaño / 2 - self.y
            ang = math.atan2(dy, dx)
            self.x += math.cos(ang) * self.vel
            self.y += math.sin(ang) * self.vel
            self.rastreador_halo = 3
        else:
            if not (self.impactado and self.tipo == "area"):
                self.y -= self.vel

    def dibujar(self, superficie):
        if self.tipo == "area" and self.explosion_frames > 0:
            pygame.draw.circle(superficie, (255,150,0), (int(self.x), int(self.y)), 40, 4)
            pygame.draw.circle(superficie, (255,200,50), (int(self.x), int(self.y)), 20 + (self.explosion_frames // 2), 2)
            self.explosion_frames -= 1
            return
        color = {"normal": BLANCO, "rastreador": MORADO, "area": ROJO}.get(self.tipo, BLANCO)
        pygame.draw.circle(superficie, color, (int(self.x), int(self.y)), self.radio)
        if self.tipo == "rastreador" and self.rastreador_halo > 0:
            pygame.draw.circle(superficie, (200,0,200), (int(self.x), int(self.y)), 12, 2)
            self.rastreador_halo -= 1

    def fuera_de_pantalla(self):
        return self.y < -50 or self.y > ALTO + 50 or self.x < -50 or self.x > ANCHO + 50

class Bonus:
    TIPOS = ["vida", "doble_puntos", "escudo", "rastreador", "area"]
    COLORES = {"vida": VERDE, "doble_puntos": AMARILLO, "escudo": CYAN, "rastreador": MORADO, "area": ROJO}

    def __init__(self, tipo):
        self.tipo = tipo
        self.color = Bonus.COLORES[tipo]
        self.x = random.randint(20, ANCHO - 40)
        self.y = -20
        self.vel = 2
        self.tamaño = 20
        self.activo = True

    def mover(self):
        self.y += self.vel
        if self.y > ALTO:
            self.activo = False

    def dibujar(self, superficie):
        pygame.draw.rect(superficie, self.color, (self.x, self.y, self.tamaño, self.tamaño))

    def colisiona_con(self, jugador):
        return pygame.Rect(self.x, self.y, self.tamaño, self.tamaño).colliderect(
            pygame.Rect(jugador.x, jugador.y, jugador.tamaño, jugador.tamaño)
        )


class EnemigoInmortal:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.tamaño = 50
        self.color = ROJO

    def dibujar(self, superficie):
        pygame.draw.rect(superficie, self.color, (self.x, self.y, self.tamaño, self.tamaño))

    def colisiona_con_disparo(self, disparo):
        return pygame.Rect(self.x, self.y, self.tamaño, self.tamaño).colliderect(
            pygame.Rect(disparo.x - disparo.radio, disparo.y - disparo.radio, disparo.radio * 2, disparo.radio * 2)
        )

    def colisiona_con_jugador(self, jugador):
        return pygame.Rect(self.x, self.y, self.tamaño, self.tamaño).colliderect(
            pygame.Rect(jugador.x, jugador.y, jugador.tamaño, jugador.tamaño)
        )


# -----------------------------------------------------
# CONFIGURACIÓN DEL JUEGO
# -----------------------------------------------------

jugador = Jugador()
enemigos = [EnemigoInmortal(ANCHO//2 - 30, 120), EnemigoInmortal(ANCHO//2 + 30, 120)]
disparos = []
bonus_actual = None
bonus_usados_nivel = set()
ultimo_bonus_tiempo = time.time()
siguiente_bonus = random.randint(3, 4)
clock = pygame.time.Clock()
fuente = pygame.font.SysFont(None, 28)

nivel = 1
puntos_para_siguiente_nivel = 200

# -----------------------------------------------------
# BUCLE PRINCIPAL
# -----------------------------------------------------

ejecutando = True
while ejecutando:
    for evento in pygame.event.get():
        if evento.type == pygame.QUIT:
            ejecutando = False
        if evento.type == pygame.KEYDOWN:
            if evento.key == pygame.K_SPACE:
                jugador.disparar(disparos)
            if pygame.K_1 <= evento.key <= pygame.K_5:
                jugador.usar_bonus(evento.key - pygame.K_1 + 1)

    teclas = pygame.key.get_pressed()
    jugador.mover(teclas)
    jugador.actualizar_bonus()

    # Cambio de nivel
    if jugador.puntos >= puntos_para_siguiente_nivel:
        nivel += 1
        puntos_para_siguiente_nivel += 200
        bonus_usados_nivel.clear()

    # Aparición de bonus
    if time.time() - ultimo_bonus_tiempo >= siguiente_bonus and len(bonus_usados_nivel) < len(Bonus.TIPOS):
        tipo = random.choice([t for t in Bonus.TIPOS if t not in bonus_usados_nivel])
        bonus_actual = Bonus(tipo)
        bonus_usados_nivel.add(tipo)
        ultimo_bonus_tiempo = time.time()
        siguiente_bonus = random.randint(10, 20)

    # Movimiento y colisiones de disparos
    for disparo in disparos[:]:
        objetivo = enemigos[0] if disparo.tipo == "rastreador" else None
        disparo.mover(objetivo)

        if disparo.tipo == "area" and not disparo.impactado:
            for enemigo in enemigos:
                if enemigo.colisiona_con_disparo(disparo):
                    for e in enemigos:
                        dx = e.x + e.tamaño/2 - disparo.x
                        dy = e.y + e.tamaño/2 - disparo.y
                        if math.hypot(dx, dy) <= 60:
                            jugador.puntos += 10*(2 if jugador.doble_puntos else 1)
                    disparo.impactado = True
                    disparo.explosion_frames = 15
                    break

        elif not disparo.impactado:
            for enemigo in enemigos:
                if enemigo.colisiona_con_disparo(disparo):
                    jugador.puntos += 10*(2 if jugador.doble_puntos else 1)
                    disparo.impactado = True
                    disparo.rastreador_halo = 6
                    break

        if disparo.tipo == "area":
            if disparo.impactado and disparo.explosion_frames <= 0:
                disparos.remove(disparo)
            elif not disparo.impactado and disparo.fuera_de_pantalla():
                disparos.remove(disparo)
        else:
            if disparo.impactado or disparo.fuera_de_pantalla():
                disparos.remove(disparo)

    # Colisiones jugador-enemigos
    for enemigo in enemigos:
        if enemigo.colisiona_con_jugador(jugador):
            jugador.recibir_daño()

    # Movimiento de bonus
    if bonus_actual and bonus_actual.activo:
        bonus_actual.mover()
        if bonus_actual.colisiona_con(jugador):
            jugador.asignar_bonus_tecla(bonus_actual.tipo)
            bonus_actual.activo = False

    # Dibujar escena
    pantalla.fill(NEGRO)
    jugador.dibujar(pantalla)
    for enemigo in enemigos:
        enemigo.dibujar(pantalla)
    for disparo in disparos:
        disparo.dibujar(pantalla)
    if bonus_actual and bonus_actual.activo:
        bonus_actual.dibujar(pantalla)

    # HUD
    hud = fuente.render(f"Nivel:{nivel}  Vida:{jugador.vida}  Puntos:{jugador.puntos}", True, BLANCO)
    pantalla.blit(hud, (20, 20))

    # Inventario visual
    for i in range(1,6):
        valor = jugador.bonus_teclas[i]
        if i in [1,2,3]:
            color = VERDE if valor else (80,80,80)
        else:
            color = MORADO if i==5 and valor>0 else (255,100,100) if i==4 and valor>0 else (80,80,80)
        pygame.draw.rect(pantalla, color, (20+(i-1)*60, ALTO-50, 40, 40))
        txt = fuente.render(str(i), True, BLANCO)
        pantalla.blit(txt, (30+(i-1)*60, ALTO-45))

    # Game Over
    if jugador.vida <= 0:
        fin = fuente.render("GAME OVER", True, ROJO)
        pantalla.blit(fin, (ANCHO//2 - 100, ALTO//2))
        pygame.display.flip()
        pygame.time.wait(3000)
        ejecutando = False
        continue

    pygame.display.flip()
    clock.tick(60)

pygame.quit()